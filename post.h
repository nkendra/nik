////////////////////////////////////////////////////////////////////////////////
/// @brief Declaration of Post
/// @internal
/// 
/// Jun 22, 2013, nik: initial
////////////////////////////////////////////////////////////////////////////////

#ifndef POST_H_
#define POST_H_

#include "generic_utility.h"

namespace nik {

template <typename T>
class Post_Traits{

private:
	template <typename S>
	class PointerTraits {
	public:
		enum { isPointer = false};
		typedef NullType PointeeType;
	};
	template <typename S>
	class PointerTraits<S*> {
	public:
		enum { isPointer = true};
		typedef S PointeeType;
	};

public:

	typedef T PostDataType;

	///////////////////////////////////////////////////////////////////////////
	/// @brief Post data type
	///////////////////////////////////////////////////////////////////////////
	typedef typename PointerTraits<T>::PointeeType PointeeType;

	enum { isPointer = PointerTraits<T>::isPointer};

}; // end class Post_Traits


////////////////////////////////////////////////////////////////////////////////
/// @class Post Post.h <posterboard/post.h>
////////////////////////////////////////////////////////////////////////////////
template <typename T, typename D =  DestructPolicy<T> >
class Post
{
public:

	///////////////////////////////////////////////////////////////////////////
	/// @brief Post ID type
	///////////////////////////////////////////////////////////////////////////
	typedef unsigned int PostID;

	///////////////////////////////////////////////////////////////////////////
	/// @brief Post traits
	///////////////////////////////////////////////////////////////////////////
	typedef Post_Traits<T> PostTraits;

	///////////////////////////////////////////////////////////////////////////
	/// @brief Post data type
	///////////////////////////////////////////////////////////////////////////
	typedef T PostDataType;

	///////////////////////////////////////////////////////////////////////////
	/// @brief Policy for destruction
	///////////////////////////////////////////////////////////////////////////
	typedef D OnDestructPolicy;

	///////////////////////////////////////////////////////////////////////////
	/// @brief Constructor
	/// @param[in] data The data for the post.  Creates and stores a copy of
	///		the data.
	///////////////////////////////////////////////////////////////////////////
	Post(const PostDataType& data, PostID id)
	: m_Data(data),
	  m_PostID(id)
	{}

	~Post()
	{
		OnDestructPolicy::destroy(m_Data);
	}

	PostID getID() const
	{
		return m_PostID;
	}

	const PostDataType& getData() const
	{
		return m_Data;
	}

	void setDataRef(const PostDataType& d)
	{
		m_Data = d;
	}

	PostDataType* operator->()
	{
		return &m_Data;
	}

private:

	PostDataType m_Data;
	const PostID m_PostID;

};



} /* namespace nik */
#endif /* POST_H_ */
